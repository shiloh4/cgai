/////////////////////////////////////////////////////
//// CS 8803/4803 CGAI: Computer Graphics in AI Era
//// Assignment 1B: Neural SDF
/////////////////////////////////////////////////////

precision highp float;              //// set default precision of float variables to high precision

varying vec2 vUv;                   //// screen uv coordinates (varying, from vertex shader)
uniform vec2 iResolution;           //// screen resolution (uniform, from CPU)
uniform float iTime;                //// time elapsed (uniform, from CPU)

#define PI 3.1415925359

const vec3 CAM_POS = vec3(0, 1, 0);

vec3 rotate(vec3 p, vec3 ax, float ro)
{
    return mix(dot(p, ax) * ax, p, cos(ro)) + sin(ro) * cross(ax, p);
}

float sdfSmoothUnion(float s1, float s2, float k)
{   
    return -k * log2(exp2(-s1 / k) + exp2(-s2 / k));
}

vec3 palette(in float t) 
{
  vec3 a = vec3(0.5, 0.5, 0.5);
  vec3 b = vec3(0.5, 0.5, 0.5);
  vec3 c = vec3(1.0, 1.0, 1.0);
  vec3 d = vec3(0.0, 0.25, 0.25);
//   vec3 d = vec3(0.0, 0.10, 0.20);


  vec3 color = a + b * cos(6.28318 * (c * t + d));
//   color = (color - 0.5) * 2.2 + 0.5; // add contrast
  return color;

}

/////////////////////////////////////////////////////
//// sdf functions
/////////////////////////////////////////////////////

float sdfPlane(vec3 p, float h)
{
    return p.y - h;
}

float sdfBunny(vec3 p)
{
    p = rotate(p, vec3(1., 0., 0.), PI / 2.);
    p = rotate(p, vec3(0., 0., 1.), PI / 2. + PI / 1.);

    // sdf is undefined outside the unit sphere, uncomment to witness the abominations
    if(length(p) > 1.0)
    {
        return length(p) - 0.9;
    }

    //// neural network weights for the bunny 

    vec4 f0_0=sin(p.y*vec4(1.74,-2.67,1.91,-1.93)+p.z*vec4(2.15,-3.05,.50,-1.32)+p.x*vec4(2.47,.30,-2.00,-2.75)+vec4(1.31,6.89,-8.25,.15));
    vec4 f0_1=sin(p.y*vec4(-.72,-3.13,4.36,-3.50)+p.z*vec4(3.39,3.58,-4.52,-1.10)+p.x*vec4(-1.02,-2.90,2.23,-.62)+vec4(1.61,-.84,-2.00,-.47));
    vec4 f0_2=sin(p.y*vec4(-1.47,.32,-.70,-1.51)+p.z*vec4(.17,.75,3.59,4.05)+p.x*vec4(-3.10,1.40,4.72,2.90)+vec4(-6.76,-6.43,2.41,-.66));
    vec4 f0_3=sin(p.y*vec4(-2.75,1.59,3.43,-3.39)+p.z*vec4(4.09,4.09,-2.34,1.23)+p.x*vec4(1.07,.65,-.18,-3.46)+vec4(-5.09,.73,3.06,3.35));
    vec4 f1_0=sin(mat4(.47,.12,-.23,-.04,.48,.06,-.24,.19,.12,.72,-.08,.39,.37,-.14,-.01,.06)*f0_0+
        mat4(-.62,-.40,-.81,-.30,-.34,.08,.26,.37,-.16,.38,-.09,.36,.02,-.50,.34,-.38)*f0_1+
        mat4(-.26,-.51,-.32,.32,-.67,.35,-.43,.93,.12,.34,.07,-.01,.67,.27,.43,-.02)*f0_2+
        mat4(.02,-.18,-.15,-.10,.47,-.07,.82,-.46,.18,.44,.39,-.94,-.20,-.28,-.20,.29)*f0_3+
        vec4(-.09,-3.49,2.17,-1.45))/1.0+f0_0;
    vec4 f1_1=sin(mat4(-.46,-.33,-.85,-.57,.41,.87,.25,.58,-.47,.16,-.14,-.06,-.70,-.82,-.20,.47)*f0_0+
        mat4(-.15,-.73,-.46,-.58,-.54,-.34,-.02,.12,.55,.32,.22,-.87,-.57,-.28,-.51,.10)*f0_1+
        mat4(.75,1.06,-.08,-.17,-.43,.69,1.07,.23,.46,-.02,.10,-.11,.21,-.70,-.08,-.48)*f0_2+
        mat4(.04,-.09,-.51,-.06,1.12,-.21,-.35,-.17,-.95,.49,.22,.99,.62,-.25,.06,-.20)*f0_3+
        vec4(-.61,2.91,-.17,.71))/1.0+f0_1;
    vec4 f1_2=sin(mat4(.01,-.86,-.07,.46,.73,-.28,.83,.12,.16,.33,.28,-.55,-.21,-.02,.53,-.15)*f0_0+
        mat4(-.28,-.32,.19,-.28,.24,-.23,-.61,-.39,.26,.40,.18,.41,.21,.57,-.91,-.29)*f0_1+
        mat4(.23,-.40,-1.34,-.50,.08,-.04,-1.67,-.16,-.65,-.09,.38,-.22,-.14,-.34,.37,.05)*f0_2+
        mat4(-.47,-.23,-.57,-.05,.51,.04,.00,.27,.80,.29,-.09,-.53,-.20,-.41,-.64,-.12)*f0_3+
        vec4(1.08,4.00,-2.54,2.18))/1.0+f0_2;
    vec4 f1_3=sin(mat4(-.30,.38,.39,.53,.73,.73,-.06,.01,.54,-.07,-.19,.68,.59,.40,.04,.07)*f0_0+
        mat4(-.17,.44,-.61,.43,-.84,-.12,.65,-.50,.33,-.31,-.28,.13,.18,-.42,.14,.08)*f0_1+
        mat4(-.78,.06,-.18,.37,-.99,.49,.71,.15,.27,-.48,-.17,.25,.05,.10,-.40,-.21)*f0_2+
        mat4(-.17,-.27,.40,.18,-.24,.23,.03,-.83,-.30,-.38,.07,.21,-.45,-.24,.78,.50)*f0_3+
        vec4(2.14,-3.48,3.81,-1.43))/1.0+f0_3;
    vec4 f2_0=sin(mat4(.83,.15,-.49,-.80,-.83,.16,1.24,.75,-.27,.18,-.13,1.05,.70,-.15,.30,.79)*f1_0+
        mat4(-.38,-.17,.34,.67,-.39,.09,.48,-.93,.19,.60,-.20,-.22,-.76,-.62,-.40,.01)*f1_1+
        mat4(.10,.22,.08,.13,-.42,-.11,.71,-.63,.02,.46,-.07,-.46,-.37,.07,.15,.14)*f1_2+
        mat4(.09,-.48,-.38,.40,-.57,-.88,-.14,-.25,.20,.95,.86,-1.08,.46,.04,.53,-.82)*f1_3+
        vec4(3.47,-3.66,3.06,.84))/1.4+f1_0;
    vec4 f2_1=sin(mat4(1.03,.03,-.76,-.03,.84,.66,-.49,.74,-.09,-.85,-.55,.17,.07,.85,-.55,-.20)*f1_0+
        mat4(-.55,1.13,.41,-.21,-.55,.19,.49,.67,.40,1.80,-.82,-.83,-1.02,.78,-.42,-.51)*f1_1+
        mat4(.77,-.88,.64,1.10,-.49,1.05,-.43,-.38,.66,-.63,.02,.11,-.24,-.23,.49,-.65)*f1_2+
        mat4(-.66,1.90,.02,-.48,.22,-.62,-.68,-.44,.52,-.57,.16,-.61,-.03,-.02,-.88,-.23)*f1_3+
        vec4(.58,-3.00,-2.53,.14))/1.4+f1_1;
    vec4 f2_2=sin(mat4(-.44,-.06,.30,-.37,.27,-.23,-.56,.15,.03,-.14,-.08,.72,.76,-.58,.55,.29)*f1_0+
        mat4(.31,.23,.42,-.17,.37,-.05,.39,.46,-1.14,.32,.06,-.28,.28,-.21,-.58,.62)*f1_1+
        mat4(.92,-.16,.86,-.09,-.12,.33,-.49,-.24,.29,-.19,.95,-.40,-.87,.08,.08,-.71)*f1_2+
        mat4(-.45,.67,1.07,-.14,-.56,.06,-.81,-.15,-.57,-.24,-1.09,.69,-.44,-.32,-.00,-.07)*f1_3+
        vec4(-4.43,-1.86,-2.87,1.45))/1.4+f1_2;
    vec4 f2_3=sin(mat4(.58,.25,.01,-.54,.34,.56,.61,-.79,-.01,.05,-.57,-1.31,.74,.78,-.10,-.11)*f1_0+
        mat4(-.03,-.48,-.24,.01,.10,.23,.22,-.05,.76,.29,-.37,.02,.54,-.07,.27,.38)*f1_1+
        mat4(.31,-1.03,.24,.95,.80,.29,.43,.61,-.04,-.22,-.06,-.52,-.46,.35,.07,-.07)*f1_2+
        mat4(.47,-.12,-.62,.06,.47,-.41,.53,-2.14,-.59,.16,.74,-.58,.32,.66,-.30,-.18)*f1_3+
        vec4(-2.86,-3.27,-.55,2.87))/1.4+f1_3;
    return dot(f2_0,vec4(-.08,.03,.07,-.03))+
        dot(f2_1,vec4(-.03,-.02,-.06,-.07))+
        dot(f2_2,vec4(.05,-.09,.03,.11))+
        dot(f2_3,vec4(.03,.06,-.06,-.03))+
        -0.014;
}

/////////////////////////////////////////////////////
//// Step 1: training a neural SDF model
//// You are asked to train your own neural SDF model on Colab. 
//// Your implementation should take place in neural_sdf.ipynb.
/////////////////////////////////////////////////////

/////////////////////////////////////////////////////
//// Step 2: copy neural SDF weights to GLSL
//// In this step, you are asked to the network weights you have trained from the text file to the function sdfCow().
//// You should replace the default implementation (a sphere) with your own network weights. 
/////////////////////////////////////////////////////

float sdfCow(vec3 p)
{    p = rotate(p, vec3(1., 0., 0.), PI / 2.);
    p = rotate(p, vec3(0., 0., 1.), PI / 3. + PI/3.0);

    // sdf is undefined outside the unit sphere, uncomment to witness the abominations
    if(length(p) > 1.)
    {
        return length(p) - 0.9;
    }

    //// your implementation starts
    vec4 f0_0=sin(p.y*vec4(.20,3.41,-3.47,.54)+p.z*vec4(-1.15,1.75,3.70,3.00)+p.x*vec4(1.54,-.77,.68,-4.80)+vec4(1.66,6.93,8.46,-1.89));
    vec4 f0_1=sin(p.y*vec4(3.35,2.55,1.54,-.23)+p.z*vec4(2.20,.83,1.23,3.84)+p.x*vec4(1.32,-2.66,3.23,.88)+vec4(-6.32,.61,-8.47,.11));
    vec4 f0_2=sin(p.y*vec4(-4.59,-1.23,3.79,.15)+p.z*vec4(-4.67,-3.99,1.17,2.26)+p.x*vec4(-.21,2.87,4.38,.28)+vec4(1.44,1.88,-6.53,2.34));
    vec4 f0_3=sin(p.y*vec4(-4.18,-3.57,-.46,1.60)+p.z*vec4(.05,.48,-.50,2.50)+p.x*vec4(.77,-2.71,-4.09,2.86)+vec4(4.66,-1.49,.19,-7.89));
    vec4 f0_4=sin(p.y*vec4(2.98,-.96,2.32,-1.13)+p.z*vec4(-.57,-2.68,.01,-1.85)+p.x*vec4(1.42,-3.02,3.13,.46)+vec4(-5.54,-2.87,-5.20,3.04));
    vec4 f0_5=sin(p.y*vec4(-3.88,-4.44,1.87,.25)+p.z*vec4(-1.46,2.12,-2.99,-2.96)+p.x*vec4(-3.81,.22,4.24,.77)+vec4(2.18,1.11,7.56,-3.79));
    vec4 f0_6=sin(p.y*vec4(3.10,.49,-2.59,-.46)+p.z*vec4(1.43,-.75,3.04,2.60)+p.x*vec4(1.06,.88,.92,-.52)+vec4(8.52,5.87,1.76,3.83));
    vec4 f0_7=sin(p.y*vec4(-4.19,3.75,-3.90,-1.48)+p.z*vec4(-1.26,3.84,-3.00,.46)+p.x*vec4(-.31,-3.99,-2.58,4.31)+vec4(5.37,-.45,6.97,-1.87));
    vec4 f1_0=sin(mat4(.06,-.11,.29,.16,.04,.22,-.27,-.17,.25,.34,.05,-.05,.34,-.23,-.09,.26)*f0_0+
        mat4(.24,.07,-.06,.24,.18,-.05,.13,-.15,.15,.35,.29,.01,-.39,.25,-.29,.25)*f0_1+
        mat4(-.14,-.16,-.14,-.48,-.35,-.10,-.19,-.08,.03,.17,-.30,.19,.59,.04,-.29,-.14)*f0_2+
        mat4(-.17,.35,.29,.25,.71,-.02,-.09,.29,.04,.16,.42,.10,-.04,-.07,.31,.24)*f0_3+
        mat4(.14,-.23,.17,-.22,.23,-.14,.42,.13,-.47,.46,-.30,-.22,-.30,.00,.27,.10)*f0_4+
        mat4(.03,-.11,-.16,-.01,-.42,-.20,.09,.21,-.35,.06,-.05,.16,.43,.22,.11,.25)*f0_5+
        mat4(-.37,-.30,-.36,-.23,.31,.38,-.69,-.36,-.46,-.29,.24,-.05,-.37,-.41,.04,.24)*f0_6+
        mat4(.31,.09,-.08,.33,-.30,.18,.09,-.19,.16,-.17,-.30,-.22,.27,-.23,.28,-.26)*f0_7+
        vec4(-.50,-2.09,.12,-2.37))/1.0+f0_0;
    vec4 f1_1=sin(mat4(.26,-.28,.02,.15,-.30,-.47,-.31,.09,-.31,-.07,-.30,.10,.07,.05,.24,.39)*f0_0+
        mat4(-.34,-.15,-.44,-.06,.33,.05,.39,.25,.41,.33,.18,.05,-.02,-.07,.23,.36)*f0_1+
        mat4(.31,-.00,.11,-.28,.35,.32,.38,-.18,-.09,.29,.21,.00,-.27,-.29,.43,.22)*f0_2+
        mat4(.36,-.44,.50,.18,-.74,-.06,-.02,-.06,.19,.05,.31,-.09,.03,-.11,.12,.17)*f0_3+
        mat4(-.34,.27,.22,-.25,.49,.08,-.49,-.58,.24,-.51,-.07,-.07,-.02,-.66,-.09,.09)*f0_4+
        mat4(-.27,.02,.07,-.26,-.07,.16,.36,.30,-.40,-.23,-.19,.03,-.46,-.45,.11,-.17)*f0_5+
        mat4(-.34,.40,.21,.05,-.06,.11,.43,-.34,-.19,-.04,-.43,-.11,.11,.05,-.01,-.42)*f0_6+
        mat4(-.03,-.37,.37,.20,-.29,.03,-.50,.37,-.01,.06,.19,.15,.44,-.14,-.42,.15)*f0_7+
        vec4(.14,.15,-1.94,-2.35))/1.0+f0_1;
    vec4 f1_2=sin(mat4(.21,.27,-.41,-.36,-.10,.23,.21,.65,.09,.39,-.19,.08,.06,.30,.17,-.33)*f0_0+
        mat4(.12,-.01,.46,-.29,.21,.39,-.21,-.34,-.16,.07,.11,.36,.16,-.30,.08,-.11)*f0_1+
        mat4(-.08,-.33,-.29,.18,.01,-.06,.18,.17,-.33,-.33,-.39,-.15,.23,-.11,.07,-.02)*f0_2+
        mat4(-.38,.29,.40,-.38,.16,-.09,.26,.27,.18,.22,-.32,-.18,.07,.37,.11,-.16)*f0_3+
        mat4(-.18,-.08,.12,.33,.04,-.40,.33,.20,.35,-.03,-.02,-.28,-.16,-.14,.28,-.39)*f0_4+
        mat4(-.31,.06,.02,-.43,.09,.10,.02,-.33,-.30,-.17,.04,.73,-.06,-.10,.14,-.12)*f0_5+
        mat4(.20,-.38,-.10,-.27,-.28,.27,.25,.31,-.05,-.29,-.22,.82,-.21,.02,.04,.34)*f0_6+
        mat4(.04,.49,-.45,-.37,-.28,.48,-.31,-.45,.05,.34,-.12,.16,-.09,.41,.30,-.02)*f0_7+
        vec4(1.90,.06,-1.28,1.27))/1.0+f0_2;
    vec4 f1_3=sin(mat4(.55,.78,-.52,.14,-.24,.35,.45,-.43,.92,-.23,.33,-.02,.28,.46,-.06,.32)*f0_0+
        mat4(-.42,.09,-.20,.33,.57,.16,-.21,-.01,-.29,-.06,-.13,-.24,.22,.22,.32,.49)*f0_1+
        mat4(.22,-.31,-.08,-.09,.19,-.34,-.09,.17,-.28,.08,.16,.45,.21,-.33,-.17,.02)*f0_2+
        mat4(.60,.64,.12,.02,-.15,-.20,-.01,-.22,.26,-.05,-.01,.01,-.41,-.20,.15,.10)*f0_3+
        mat4(.15,-.10,.11,-.02,.30,-.18,.39,.38,.45,.14,.09,-.03,-.02,.19,.07,.47)*f0_4+
        mat4(.43,-.25,-.05,.50,.04,-.21,.30,-.15,.61,-.31,-.30,-.30,.13,.09,.05,-.31)*f0_5+
        mat4(-.08,.15,-.54,-.14,-.05,-.48,-.02,.25,-.31,.03,-.09,-.23,-.34,-.52,.13,-.13)*f0_6+
        mat4(-.38,-.17,-.24,.06,-.04,.21,-.03,-.30,.31,.02,.31,.12,-.22,.29,.08,-.10)*f0_7+
        vec4(.77,-2.01,-1.72,2.66))/1.0+f0_3;
    vec4 f1_4=sin(mat4(.36,-.30,-.59,-.40,-.53,-.03,.16,-.57,.22,.13,-.10,.30,.15,.13,.12,-.21)*f0_0+
        mat4(-.40,.28,-.05,.22,-.53,.22,-.02,-.75,.04,.26,.09,-.23,.14,-.40,.24,-.17)*f0_1+
        mat4(.23,.40,.10,.19,.40,.05,.23,.35,-.15,.08,.30,.10,.39,-.39,-.09,-.11)*f0_2+
        mat4(.18,-.27,-.50,-.31,.19,-.01,.23,.10,-.28,-.23,.17,-.28,.05,-.48,-.00,-.35)*f0_3+
        mat4(-.67,-.29,.30,-.24,-.30,.02,.10,-.31,.19,.05,-.37,.19,-.64,.30,-.36,.35)*f0_4+
        mat4(.54,.00,-.34,.40,-.02,-.34,-.17,-.76,.04,.06,-.06,-.25,.19,-.05,-.04,.52)*f0_5+
        mat4(-.31,.17,-.09,-.05,.16,.03,.52,-.90,.40,-.05,-.43,.21,-.39,.37,-.12,.16)*f0_6+
        mat4(.32,.09,.46,-.38,.21,.23,.02,-.33,-.05,-.19,-.04,-.42,.07,.33,-.62,-.42)*f0_7+
        vec4(2.04,-.40,.83,1.03))/1.0+f0_4;
    vec4 f1_5=sin(mat4(-.58,-.29,.01,-.04,-.10,.27,-.09,.17,.03,.02,.08,-.33,.38,.03,.25,.05)*f0_0+
        mat4(.01,-.27,-.35,.07,-.58,.34,-.00,-.60,.25,-.32,-.22,.17,.00,-.25,-.16,-.33)*f0_1+
        mat4(-.57,.23,.30,-.03,.02,.25,.22,.35,-.31,-.21,-.16,.28,-.44,.10,.00,-.48)*f0_2+
        mat4(-.17,.16,.21,-.83,.11,-.70,-.42,.15,-.20,.12,.39,.09,-.38,-.48,.18,-.45)*f0_3+
        mat4(.53,.17,-.33,-.50,-.22,-.06,-.43,.14,-.58,-.32,.46,-.09,.11,.12,.24,-.55)*f0_4+
        mat4(.04,.23,.37,-.06,.61,-.33,.24,-.81,-.05,-.10,.10,-.04,-.07,.08,-.05,-.12)*f0_5+
        mat4(.08,.40,.24,.44,.43,.01,-.05,-.86,.77,1.10,.37,.12,.10,-.38,.22,.49)*f0_6+
        mat4(-.29,-.15,-.03,-.75,.22,-.24,-.14,.05,.04,-.23,-.12,-.48,.69,.46,.29,-.67)*f0_7+
        vec4(.21,-.15,-.53,-2.00))/1.0+f0_5;
    vec4 f1_6=sin(mat4(.35,-.12,.17,.29,.24,-.32,-.10,-.17,-.67,-.09,-.46,-.80,-.00,-.17,.19,-.53)*f0_0+
        mat4(-.41,-.37,-.16,.41,-.16,-.11,-.10,.07,-.03,.04,.23,-.09,.04,-.37,-.03,.21)*f0_1+
        mat4(-.03,-.32,-.41,.34,-.29,.34,-.17,.26,-.05,.24,-.24,-.08,.19,-.38,-.37,.33)*f0_2+
        mat4(-.01,.20,.18,.52,.28,.55,.16,.34,.37,-.23,-.00,.03,-.18,.05,.26,-.31)*f0_3+
        mat4(-.05,.24,-.14,.10,-.28,-.02,.01,-.88,-.22,-.20,.11,-1.05,-.26,.21,-.13,.46)*f0_4+
        mat4(.32,.12,-.02,-.38,-.72,-.14,.05,-.17,.03,-.10,.06,.02,-.50,-.05,.21,.17)*f0_5+
        mat4(.09,-.37,.19,-.39,.10,-.18,.03,.18,-.48,-.48,.07,-.18,-.27,.11,.01,-.24)*f0_6+
        mat4(-.33,-.31,.16,-.45,-.02,-.13,.05,-.30,.34,-.08,-.21,-.25,.63,-.02,-.05,-.15)*f0_7+
        vec4(-.13,-1.80,-1.70,-1.55))/1.0+f0_6;
    vec4 f1_7=sin(mat4(.19,.46,.41,.25,.48,.16,.30,.11,.15,.17,-.61,-.35,-.37,.19,-.21,.17)*f0_0+
        mat4(-.25,-.19,-.31,.24,.33,.04,-.03,.15,-.30,.65,-.41,.15,-.27,-.39,.47,.05)*f0_1+
        mat4(.25,-.07,-.33,-.14,.03,.12,-.10,-.04,.39,.05,.17,.22,-.09,.47,-.12,.15)*f0_2+
        mat4(.16,-.68,.02,-.03,.36,.41,-.31,-.05,-.17,-.72,-.41,-.20,-.13,.08,.42,-.17)*f0_3+
        mat4(-.04,-.26,.41,.40,.48,-1.07,-.39,.11,-.12,.48,.19,-.25,-.14,.09,-.11,.20)*f0_4+
        mat4(-.33,.27,-.05,.01,.08,.12,.15,-.28,.04,.41,-.12,-.04,.12,.29,.39,.05)*f0_5+
        mat4(-.65,.37,-.02,-.20,.28,.13,-.10,.07,-.31,.08,-.26,.34,.06,-.01,.15,-.13)*f0_6+
        mat4(.48,.01,.38,-.05,-.23,-.47,-.44,.17,-.09,.04,-.03,-.27,-.13,-.36,.21,.45)*f0_7+
        vec4(2.44,-1.45,2.71,1.59))/1.0+f0_7;
    vec4 f2_0=sin(mat4(-.21,.25,.12,.22,.03,.54,-.22,-.21,.39,-.02,.28,-.26,-.05,.47,-.24,.68)*f1_0+
        mat4(-.27,-.08,.15,-.27,.04,-.42,.20,-.13,.34,-.13,-.20,-.46,.06,.03,.21,.36)*f1_1+
        mat4(.54,.45,-.10,-.20,.21,-.46,.07,.42,.62,.14,.14,.46,.17,-.11,.26,.51)*f1_2+
        mat4(-.24,.08,-.26,.26,-.20,.64,-.31,.25,.08,-.13,.33,-.07,-.67,-.40,.57,.25)*f1_3+
        mat4(-.31,.05,-.02,.22,.05,.01,.21,-.28,-.52,-.57,.42,.03,.22,.19,-.41,.33)*f1_4+
        mat4(-.46,.02,-.09,.03,.32,.31,.06,.27,-.35,-.30,-.04,.19,.91,-.15,.19,-.36)*f1_5+
        mat4(.09,.24,-.28,.78,.80,.37,-.22,.00,.67,.41,.27,-.36,.28,.36,-.10,.28)*f1_6+
        mat4(-.91,.14,.41,.21,-.11,-.30,.15,.07,-.38,-.34,-.16,-.27,-.33,-.53,.08,-.16)*f1_7+
        vec4(-1.59,1.02,1.30,.56))/1.4+f1_0;
    vec4 f2_1=sin(mat4(-.55,-.39,.09,-.19,-.37,.28,.04,.10,.13,.01,-.39,-.20,.07,.48,-.10,-.28)*f1_0+
        mat4(.02,.23,-.38,.04,-.05,.40,.20,.65,.02,-.44,-.25,-.03,.17,.38,.30,-.04)*f1_1+
        mat4(-.11,-.45,-.30,-.14,-.27,.20,.10,.17,-.19,-.30,-.41,-.06,.03,.12,.13,-.36)*f1_2+
        mat4(-.14,-.13,.23,.08,.03,.07,-.32,.13,.07,.44,-.35,.63,.10,.11,-.19,.08)*f1_3+
        mat4(-.24,-.19,-.54,-.18,-.30,-.35,-.25,.07,.39,.05,.22,-.32,-.19,.24,.12,-.08)*f1_4+
        mat4(-.38,-.56,-.15,-.33,-.11,.49,.42,-.39,-.17,.02,-.45,.42,-.22,.50,.45,-.12)*f1_5+
        mat4(-.42,.34,.35,.06,-.35,-.37,-.32,.22,-.01,.03,-.85,.08,.22,-.04,-.06,-.13)*f1_6+
        mat4(-.01,.46,.15,-.08,-.48,-.23,.30,-.34,-.18,-.28,-.02,.17,.21,-.78,-.05,-.13)*f1_7+
        vec4(-2.39,.33,.13,-.33))/1.4+f1_1;
    vec4 f2_2=sin(mat4(.27,.46,.18,-1.06,-.25,.19,-.33,-.42,.08,-.44,.33,.14,-.40,.08,-.21,.17)*f1_0+
        mat4(.13,.22,.11,-.44,.08,.22,.03,.77,-.13,-.08,.11,.20,-.36,.38,-.01,-.19)*f1_1+
        mat4(-.05,-.93,-.14,.18,.46,.10,.35,.23,.26,-.08,-.40,.92,.37,.17,.32,-.19)*f1_2+
        mat4(.32,-.05,-.52,-.64,.60,.20,.10,.28,.11,-.24,.03,.50,.48,.03,-.24,-.06)*f1_3+
        mat4(.05,-.43,.18,-.33,.28,.46,-.44,-.12,.67,-.16,.08,-.01,-.44,-.62,-.18,-.46)*f1_4+
        mat4(.04,-.39,.07,-.26,-.35,-.40,-.46,.66,.31,.13,.47,.06,.38,.42,-.28,-.62)*f1_5+
        mat4(-.27,-.14,.62,.55,.55,.08,-.30,-.04,.17,.21,.04,.53,.17,.15,-.22,.35)*f1_6+
        mat4(.18,-.36,-.44,.33,-.39,.49,-.53,-.73,-.10,-.18,.46,-.03,.35,-.46,-.09,.10)*f1_7+
        vec4(-.22,-1.76,-2.32,2.37))/1.4+f1_2;
    vec4 f2_3=sin(mat4(.03,.58,-.26,-.08,.05,.05,.28,.27,.22,.14,-.13,.11,.04,.31,.15,.20)*f1_0+
        mat4(.04,-.12,-.08,-.12,-.12,.18,-.16,.17,.07,.11,.19,-.20,.18,-.07,.48,-.26)*f1_1+
        mat4(.26,-.46,.40,.21,-.20,.24,-.59,-.02,.32,.54,-.06,-.04,-.20,.36,-.56,.23)*f1_2+
        mat4(.42,-.28,.24,-.15,.05,-.24,.32,-.02,-.06,-.34,-.33,.16,-.12,.38,.18,.01)*f1_3+
        mat4(-.29,-.29,-.28,-.37,.10,.13,.36,-.32,-.28,-.04,.16,-.33,.09,-.26,-.13,.25)*f1_4+
        mat4(-.26,.22,.03,-.27,-.04,-.05,-.03,.40,-.24,-.66,-.53,.07,-.26,-.13,-.94,-.02)*f1_5+
        mat4(.20,.17,-.23,.29,.40,-.20,-.13,-.12,-.21,.29,-.39,-.07,-.46,.36,-.13,.12)*f1_6+
        mat4(-.15,-.34,-.11,.04,.18,.27,.64,-.01,-.07,.20,-.43,.01,-.00,-.50,.35,.16)*f1_7+
        vec4(-1.19,-.34,2.04,-2.24))/1.4+f1_3;
    vec4 f2_4=sin(mat4(.27,-.12,.13,.40,.23,.39,-.22,-.46,-.17,-.28,-.31,-.29,-.09,-.54,.02,.21)*f1_0+
        mat4(.18,.37,.37,-.30,-.06,.27,-.51,.51,-.31,-.85,.33,-.54,.26,-.56,-.10,-.14)*f1_1+
        mat4(.39,-.46,.62,.61,-.15,-.08,-.08,-.19,.29,.14,-.42,.02,-.45,-.64,.41,-.25)*f1_2+
        mat4(.09,.48,.41,.17,.13,.22,-.48,-.43,.17,.46,-.17,.32,-.13,.36,.27,.35)*f1_3+
        mat4(.20,.17,.05,-.24,.09,.78,.18,-.48,-.39,.84,.09,.44,-.09,-.13,-.04,-.46)*f1_4+
        mat4(-.24,-.09,-.08,.22,-.09,-.72,-.19,.16,-.18,-.26,.43,.02,-.17,.15,.06,.19)*f1_5+
        mat4(.16,-.55,-.20,.01,.28,.26,-.27,-.60,.45,-.00,.06,-.61,-.01,-.23,-.18,-.62)*f1_6+
        mat4(.07,.22,.47,-.23,.45,.16,.07,.24,-.05,.45,.27,-.21,.15,-.26,-.15,.29)*f1_7+
        vec4(-.26,-.85,.29,1.21))/1.4+f1_4;
    vec4 f2_5=sin(mat4(.53,-.24,.10,.34,.69,.18,-.12,-.65,-.13,-.22,.49,-.05,-.21,-.39,-.02,-.36)*f1_0+
        mat4(.33,-.23,-.36,-.21,-.05,.32,.17,-.11,.10,.03,-.03,-.34,-.42,.42,-.57,-.32)*f1_1+
        mat4(-.25,-.29,-.20,.37,.38,-.07,.11,.12,.34,-.05,.06,.31,.49,-.38,-.02,-.06)*f1_2+
        mat4(.06,-.28,.21,-.05,-.24,.50,.06,-.37,.37,.38,-.45,-.20,.43,.15,-.06,.63)*f1_3+
        mat4(.31,.24,-.00,-.27,-.01,-.63,-.44,.10,-.10,-.47,-.07,.29,.43,-.44,.08,.12)*f1_4+
        mat4(.05,.28,-.02,.04,.50,.25,.24,.01,.53,-.46,.08,-.35,.60,-.14,.18,-.41)*f1_5+
        mat4(.23,.44,.24,.25,-.29,.27,-.31,-.17,.44,.04,-.58,.03,.04,.55,-.16,-.07)*f1_6+
        mat4(-.57,-.32,.29,.20,.35,-.39,-.44,-.33,-.24,-.35,-.07,.01,-.08,.07,-.20,.32)*f1_7+
        vec4(2.36,1.74,2.20,-.98))/1.4+f1_5;
    vec4 f2_6=sin(mat4(-.02,-.00,.07,.23,.23,-.13,-.34,-.14,-.42,.17,.46,-.12,.15,-.14,.26,.30)*f1_0+
        mat4(.37,.02,.40,.31,.51,.20,-.35,.29,.01,.35,.29,.21,.33,-.10,.18,-.19)*f1_1+
        mat4(-.23,-.17,-.27,-.15,.78,.22,-.54,-.04,.13,-.07,.23,.16,-.54,.07,-.36,-.31)*f1_2+
        mat4(.34,.30,.32,.24,.18,.52,-.07,.19,.32,.47,.55,.10,.20,.10,-.41,.08)*f1_3+
        mat4(-.01,.25,.20,.29,-.17,.47,.35,.19,.26,.29,-.43,-.14,.29,-.01,.05,.13)*f1_4+
        mat4(-.06,-.45,-.28,.18,-.10,-.18,.06,.06,.26,-.10,.32,-.07,-.54,-.36,-.07,-.20)*f1_5+
        mat4(-.24,.19,.05,.04,.03,-.48,-.03,-.37,-.17,.09,.11,.28,-.29,-.07,.15,-.35)*f1_6+
        mat4(-.59,-.40,-.32,-.37,.22,-.22,.16,-.30,-.06,.25,-.31,.05,.18,-.02,-.45,-.27)*f1_7+
        vec4(2.35,-1.51,1.47,2.10))/1.4+f1_6;
    vec4 f2_7=sin(mat4(-.31,-.07,.05,.42,-.11,-.30,.16,-.12,-.04,.59,.10,.28,.31,.04,.38,.46)*f1_0+
        mat4(-.15,-.26,-.06,-.28,.19,-.52,.28,.06,.18,-.08,-.14,.06,-.21,-.06,-.11,-.40)*f1_1+
        mat4(.79,.17,-.11,.10,.27,.33,-.46,-.39,.25,.30,-.08,-.17,-.06,-.22,-.26,-.14)*f1_2+
        mat4(-.54,.36,.14,.16,.31,.92,-.24,.31,-.08,-.69,-.16,-.24,-.17,-.77,.15,.26)*f1_3+
        mat4(-.05,.16,.04,.46,.07,-.36,-.08,.26,.39,-.17,-.35,-.00,.29,.20,-.18,.08)*f1_4+
        mat4(-.23,-.78,.20,.46,-.25,-.11,-.14,-.23,-.27,.13,.20,-.32,-.40,-.47,.00,.46)*f1_5+
        mat4(-.10,-.96,-.06,.09,-.47,.25,-.19,-.30,.09,.43,.15,.02,-.11,-.17,-.19,-.23)*f1_6+
        mat4(.29,.88,-.14,-.52,-.13,-.68,-.21,-.09,-.21,.63,.13,-.09,.52,-.19,.48,-.00)*f1_7+
        vec4(-2.38,-2.04,-2.13,.62))/1.4+f1_7;
    return dot(f2_0,vec4(.02,-.03,.06,-.03))+
        dot(f2_1,vec4(-.01,-.03,.02,-.04))+
        dot(f2_2,vec4(.06,.03,-.02,-.01))+
        dot(f2_3,vec4(-.01,-.02,-.03,-.03))+
        dot(f2_4,vec4(-.02,-.02,.00,-.01))+
        dot(f2_5,vec4(-.03,-.03,-.04,.03))+
        dot(f2_6,vec4(.02,-.02,-.05,.03))+
        dot(f2_7,vec4(-.02,-.01,-.06,.02))+
        -0.098;
    //// your implementation ends
}

float sdfAmogus(vec3 p)
{
    p = rotate(p, vec3(1., 0., 0.), PI / 2.);
    p = rotate(p, vec3(0., 0., 1.), PI / 3. + PI/3.0);

    // sdf is undefined outside the unit sphere, uncomment to witness the abominations
    if(length(p) > 1.)
    {
        return length(p) - 0.9;
    }

    //// your implementation starts
    vec4 f0_0=sin(p.y*vec4(3.49,-3.79,.43,-3.13)+p.z*vec4(-3.61,.84,-2.29,3.79)+p.x*vec4(.38,-4.42,.33,-2.20)+vec4(-2.59,1.76,3.77,-5.85));
    vec4 f0_1=sin(p.y*vec4(-1.04,.78,.78,-4.19)+p.z*vec4(2.52,3.58,-.60,1.42)+p.x*vec4(-1.46,-.08,2.23,.55)+vec4(7.01,-7.52,-4.61,8.35));
    vec4 f0_2=sin(p.y*vec4(-.79,3.19,-3.77,-.55)+p.z*vec4(-.82,-.40,-2.00,-1.77)+p.x*vec4(1.39,2.97,1.32,4.24)+vec4(-8.41,.15,2.03,-3.48));
    vec4 f0_3=sin(p.y*vec4(-2.72,-1.16,-1.70,2.60)+p.z*vec4(-2.52,-.91,-3.92,-.94)+p.x*vec4(-3.37,-4.33,4.70,-2.88)+vec4(.78,5.67,-.81,-.31));
    vec4 f0_4=sin(p.y*vec4(4.07,-2.90,-4.20,1.78)+p.z*vec4(-1.00,2.45,-4.59,-.48)+p.x*vec4(-4.03,4.58,.39,-2.51)+vec4(7.74,6.15,4.34,6.35));
    vec4 f0_5=sin(p.y*vec4(.02,-2.39,-4.54,2.29)+p.z*vec4(1.12,-1.33,.66,2.97)+p.x*vec4(3.17,4.45,-3.93,3.10)+vec4(1.38,-2.25,-2.91,.85));
    vec4 f0_6=sin(p.y*vec4(-.41,-3.06,1.61,-2.89)+p.z*vec4(-3.24,.81,-1.87,3.23)+p.x*vec4(1.62,3.42,2.60,-.24)+vec4(-2.77,-.13,-.97,-.57));
    vec4 f0_7=sin(p.y*vec4(-3.79,3.41,-1.29,1.26)+p.z*vec4(4.26,-1.16,-4.03,1.22)+p.x*vec4(1.78,.30,1.63,-1.90)+vec4(6.77,-4.56,-6.42,4.54));
    vec4 f1_0=sin(mat4(-.09,.37,.32,-.24,.63,.08,-.28,.19,.03,.49,.42,.57,-.07,.10,.14,-.33)*f0_0+
        mat4(-.66,.20,.02,-.12,-.38,-.11,.37,-.48,-.27,-.34,.04,-.18,-.17,-.39,.02,.17)*f0_1+
        mat4(.21,-.31,-.31,-.41,.27,-.33,-.02,-.44,-.14,-.02,.38,-.27,.14,.14,.05,.26)*f0_2+
        mat4(-.15,-.18,-.21,.35,-.22,.25,-.15,.20,-.30,.02,.14,.51,.14,.42,-.25,-.25)*f0_3+
        mat4(-.50,.15,-.16,-.37,.11,-.07,.29,.07,-.04,.20,.08,.37,.17,-.30,-.14,.06)*f0_4+
        mat4(-.26,.21,-.03,-.07,-.02,-.31,-.28,.60,-.23,-.25,.29,.09,-.19,-.50,-.54,-.37)*f0_5+
        mat4(.14,-.30,-.35,-.17,-.19,-.01,-.34,-.24,.30,-.19,-.03,-.22,-.21,.44,.16,.00)*f0_6+
        mat4(-.17,-.15,.17,.21,.34,.19,-.30,-.18,-.40,.10,.03,-.06,.11,-.18,.18,-.37)*f0_7+
        vec4(-1.57,-1.94,2.01,1.47))/1.0+f0_0;
    vec4 f1_1=sin(mat4(.20,-.23,.34,-.08,-.11,-.07,-.41,.05,.60,.36,-.04,-.10,.55,.05,-.10,.41)*f0_0+
        mat4(-.26,-.02,.39,.23,.28,.07,-.11,.26,-.37,-.14,-.31,-.18,.18,-.40,-.05,-.09)*f0_1+
        mat4(.24,-.10,.19,-.40,.38,.09,-.50,-.07,.12,-.10,-.22,-.18,-.31,-.22,.10,-.48)*f0_2+
        mat4(-.34,.18,.22,.18,.35,.28,.26,-.35,-.35,-.10,-.04,-.62,.46,.52,-.35,.32)*f0_3+
        mat4(-.42,-.33,.36,.07,.13,-.04,.16,-.24,.45,.06,.09,.21,.25,-.04,-.17,.41)*f0_4+
        mat4(-.12,-.27,.10,.23,.16,.37,-.02,.24,.31,-.04,-.28,.38,-.05,-.10,-.03,-.02)*f0_5+
        mat4(.08,.05,-.06,.29,.05,.38,.16,.12,-.26,-.02,-.43,.16,.02,.21,.17,.37)*f0_6+
        mat4(-.11,-.03,-.14,-.11,-.36,-.08,.06,.12,-.05,-.10,-.27,.22,-.15,-.16,.27,-.28)*f0_7+
        vec4(2.19,1.61,1.91,-.32))/1.0+f0_1;
    vec4 f1_2=sin(mat4(-.28,-.24,.05,.23,-.02,.45,-.14,-.10,.04,-.29,.18,.04,-.05,-.48,.06,-.05)*f0_0+
        mat4(.48,-.50,-.08,-.12,.67,.39,.25,-.06,.19,.29,-.43,.22,-.02,.04,.60,-.09)*f0_1+
        mat4(.27,.29,-.15,-.39,-.06,-.07,.12,.46,-.09,-.41,.06,-.16,.15,.34,-.38,-.21)*f0_2+
        mat4(-.55,.18,.28,.30,-.19,.04,-.38,-.31,-.42,-.00,.36,.13,-.49,.00,-.34,-.58)*f0_3+
        mat4(.28,.04,.19,-.13,.35,.05,-.07,.20,.23,.36,.18,-.16,-.31,.61,.17,.06)*f0_4+
        mat4(-.16,.42,.43,-.04,.00,-.04,.05,.02,.02,.38,.08,-.22,.30,-.24,.12,-.24)*f0_5+
        mat4(-.40,.41,.35,-.34,.07,-.38,.08,-.18,-.68,-.46,.11,-.19,-.18,.40,.05,-.15)*f0_6+
        mat4(-.49,-.04,-.32,-.21,-.02,.34,.46,.37,-.14,.53,.18,.03,-.44,-.42,-.14,-.12)*f0_7+
        vec4(.08,-2.27,.23,2.06))/1.0+f0_2;
    vec4 f1_3=sin(mat4(.17,.07,-.33,-.03,-.24,-.41,.24,.07,.02,.31,.15,.21,.00,-.10,.17,.35)*f0_0+
        mat4(.14,.29,.17,-.33,.11,-.25,-.22,-.20,-.17,.09,.33,-.26,-.33,-.11,-.18,.15)*f0_1+
        mat4(.13,.03,.06,.30,.23,.18,.06,-.33,-.31,-.20,.07,-.09,-.34,-.44,.06,-.04)*f0_2+
        mat4(.12,-.26,.36,-.04,-.16,.56,.31,.23,.24,.15,.06,.06,.27,.44,-.08,.26)*f0_3+
        mat4(-.09,-.24,-.05,.07,-.43,.25,-.08,-.04,-.32,.15,.00,-.03,.11,.20,.29,-.04)*f0_4+
        mat4(-.32,-.35,.40,-.08,.01,.48,.14,-.13,-.22,.08,-.06,-.23,-.28,.04,.26,.05)*f0_5+
        mat4(-.32,.10,-.08,-.41,.37,.12,.05,.02,.09,-.26,-.27,-.34,.36,.07,-.13,-.21)*f0_6+
        mat4(-.07,-.07,.17,-.12,.09,.21,.42,-.17,-.22,-.43,-.32,.06,-.22,-.02,-.32,.42)*f0_7+
        vec4(.88,-1.80,2.40,.86))/1.0+f0_3;
    vec4 f1_4=sin(mat4(-.23,.20,.28,.20,-.05,-.34,-.10,.04,-.02,-.47,.03,-.16,-.10,.15,-.02,-.39)*f0_0+
        mat4(-.38,-.25,.34,-.09,.10,-.10,.05,.06,.39,-.11,-.53,.19,.28,-.07,.11,-.52)*f0_1+
        mat4(.16,.08,.36,.05,-.38,-.18,-.38,.23,.19,-.20,.45,-.05,.39,-.10,.48,-.17)*f0_2+
        mat4(-.18,.22,-.13,-.49,-.22,-.24,.10,-.10,-.48,.28,-.18,.04,-.37,-.02,.07,.50)*f0_3+
        mat4(.26,-.31,-.11,.17,-.21,.05,-.23,.85,-.15,.40,-.11,.21,-.28,.02,.33,.20)*f0_4+
        mat4(-.16,.18,-.51,.34,-.13,-.19,-.24,.58,.19,.25,-.30,-.14,-.42,.03,.17,.51)*f0_5+
        mat4(.28,-.25,-.46,.18,-.10,-.32,-.17,-.59,-.45,.09,-.29,.02,-.47,-.30,-.22,.38)*f0_6+
        mat4(.34,.30,-.05,.12,-.06,-.41,-.56,-.56,.26,.02,.26,.60,.23,-.07,-.24,.35)*f0_7+
        vec4(-2.53,.46,2.48,2.22))/1.0+f0_4;
    vec4 f1_5=sin(mat4(.22,-.25,-.05,-.11,-.38,-.19,-.03,.17,-.29,-.43,-.05,-.31,.33,-.49,-.19,-.10)*f0_0+
        mat4(-.57,.32,-.11,.02,-.48,.06,.04,.07,-.06,.24,-.17,.49,-.00,-.16,.22,-.11)*f0_1+
        mat4(.16,-.35,.46,-.26,-.43,-.10,.07,.32,.30,-.10,.33,.25,-.24,-.12,.34,.10)*f0_2+
        mat4(-.43,-.22,.11,-.15,-.47,.23,.12,.24,.22,.29,-.29,.06,-.01,-.28,.18,-.03)*f0_3+
        mat4(.26,-.12,-.27,.09,.37,-.20,-.01,.18,-.01,.23,-.06,-.28,.08,-.24,-.02,.18)*f0_4+
        mat4(-.13,.01,-.41,.21,.63,.25,-.05,-.01,.12,-.39,.39,.21,-.38,.14,-.17,-.18)*f0_5+
        mat4(-.18,.10,-.32,.18,.25,-.35,-.34,.35,-.21,-.22,.35,.15,.40,.45,-.18,.06)*f0_6+
        mat4(.30,.28,-.17,-.01,-.15,.01,-.23,.34,.00,.13,.13,.17,-.29,-.37,.19,-.14)*f0_7+
        vec4(1.34,2.87,2.28,-1.16))/1.0+f0_5;
    vec4 f1_6=sin(mat4(.25,.11,.05,-.21,-.25,-.02,-.43,.13,.13,-.23,.46,-.24,-.59,-.25,-.01,.01)*f0_0+
        mat4(.03,.04,-.18,.35,-.35,.21,.26,-.26,-.22,.42,.02,-.37,.09,.07,.24,.16)*f0_1+
        mat4(-.13,.41,-.10,.28,-.34,-.24,-.45,-.20,.11,-.00,.22,-.27,.45,-.06,.10,-.17)*f0_2+
        mat4(-.74,-.17,.11,.44,.80,.13,.32,.37,.00,.20,.07,.32,.12,.26,.07,.22)*f0_3+
        mat4(-.12,.22,.32,-.33,-.16,.13,-.10,.04,-.24,-.23,-.20,-.13,.30,.20,.21,.12)*f0_4+
        mat4(-.28,-.00,-.28,-.17,.56,.25,-.49,.09,.57,-.09,-.16,-.17,-.31,.21,-.20,-.09)*f0_5+
        mat4(.32,.08,.39,.13,-.26,.46,-.37,.17,-.62,-.73,.05,-.28,.34,-.51,-.10,-.03)*f0_6+
        mat4(-.01,-.16,-.00,.28,-.20,.51,.34,-.18,.28,-.40,.10,.24,-.01,-.63,-.27,-.20)*f0_7+
        vec4(-1.62,-2.87,-3.01,-1.22))/1.0+f0_6;
    vec4 f1_7=sin(mat4(-.05,-.07,.52,-.20,-.40,-.16,-.08,-.13,-.11,-.01,.32,-.08,-.21,-.25,.06,-.04)*f0_0+
        mat4(-.03,.00,.23,-.05,.14,-.02,-.27,-.12,-.22,.25,-.34,-.15,-.21,-.02,-.47,.16)*f0_1+
        mat4(-.41,-.43,.25,-.10,.37,.57,.14,.23,.43,.15,.18,.29,-.30,.43,.14,.06)*f0_2+
        mat4(-.17,.15,-.89,.15,.44,.39,-.03,.14,-.10,-.18,-.02,-.14,-.18,-.12,-.16,.08)*f0_3+
        mat4(.18,.16,-.27,-.13,.23,.13,.24,-.05,-.23,-.14,.32,.01,.15,-.56,-.49,-.20)*f0_4+
        mat4(.18,-.50,.15,-.00,-.06,-.09,.04,-.38,.16,-.19,-.31,-.22,.31,-.26,-.36,-.11)*f0_5+
        mat4(.17,.10,-.33,.34,-.28,.36,-.22,-.28,.20,.10,.37,-.26,-.24,.32,.00,.01)*f0_6+
        mat4(.33,-.03,-.32,-.44,.07,-.35,.08,-.17,-.10,-.23,-.10,.17,-.10,.27,-.55,-.22)*f0_7+
        vec4(-2.03,2.15,1.02,-.17))/1.0+f0_7;
    vec4 f2_0=sin(mat4(-.10,.15,.14,-.17,-.20,.29,.14,.02,.08,.01,-.27,.56,.43,.32,-.25,-.34)*f1_0+
        mat4(-.28,-.94,-.50,-.64,-.36,-1.33,.11,.53,-.42,-.22,-.27,.18,.43,-.42,.08,.23)*f1_1+
        mat4(-.16,.12,-.00,-.45,.59,.53,.11,.29,-.13,-.28,.14,.37,-.29,.05,-.34,-.14)*f1_2+
        mat4(-.06,1.07,-.41,-.51,.59,.20,-.56,.42,.45,-.30,-.02,.20,-.06,-.28,-.30,.07)*f1_3+
        mat4(-.00,-1.14,.38,-.58,-.37,.86,-.37,-.12,.31,.48,-.06,-.11,-.59,-.75,-.32,.14)*f1_4+
        mat4(.09,.46,-.03,-.31,.18,.06,-.20,.37,-.08,-.04,.15,-.32,.58,.35,.07,-.29)*f1_5+
        mat4(-.51,-.40,.45,.22,-.47,-.43,-.38,.21,.29,-.52,.11,-.12,-.67,-.31,.23,.02)*f1_6+
        mat4(-.11,.00,.21,-.20,.24,-.19,-.07,.08,-.25,.26,-.12,.17,-.64,.29,-.08,.11)*f1_7+
        vec4(2.20,-.43,-2.63,2.03))/1.4+f1_0;
    vec4 f2_1=sin(mat4(-.13,.13,-.41,.17,-.22,-.34,.36,-.19,-.40,-.31,.33,-.40,.06,.23,.41,-.38)*f1_0+
        mat4(-.17,.08,.18,.22,.04,.07,.64,.36,.42,.28,-.34,.71,.31,.06,-.01,.03)*f1_1+
        mat4(-.40,.26,-.10,-.02,-.48,-.10,-.25,-.04,-.14,.23,-.02,-.26,.12,.03,.50,.11)*f1_2+
        mat4(-.01,.05,.03,-.18,-.23,.27,.19,.07,.44,.06,.27,.06,.17,-.29,.12,.19)*f1_3+
        mat4(-.20,.03,-.12,-.47,-.32,.14,.13,.17,.04,-.30,-.45,-.42,-.55,-.28,.30,-.19)*f1_4+
        mat4(.29,.04,-.18,.22,-.20,-.49,.09,.43,-.35,.10,.13,.11,-.20,.06,-.02,-.48)*f1_5+
        mat4(-.03,.03,-.10,-.18,-.18,.21,.28,.32,-.22,.14,.12,.12,-.34,-.34,.16,-.17)*f1_6+
        mat4(.29,-.06,.55,.33,.53,-.02,.10,.26,.53,-.02,-.10,-.16,-.17,-.47,-.18,-.20)*f1_7+
        vec4(-1.87,2.25,-.50,-2.60))/1.4+f1_1;
    vec4 f2_2=sin(mat4(.21,-.54,.26,.03,.19,.01,.34,.14,-.35,-.10,.18,.25,-.01,.27,.49,.33)*f1_0+
        mat4(-.59,.08,-.14,.22,-.08,.16,1.14,.41,.05,.38,.75,.06,.10,.09,-.63,-.37)*f1_1+
        mat4(-.06,.09,-.33,.05,-.53,-.20,-1.27,-.07,.22,-.24,.05,-.15,-.19,-.11,-.36,-.31)*f1_2+
        mat4(.62,-.40,-.44,-.10,.32,.08,-.50,.30,.10,.32,.31,.04,.08,.19,.48,.40)*f1_3+
        mat4(-.20,-.04,-.09,-.28,.27,-.05,-.05,-.30,.19,-.20,-.19,-.01,-.02,.28,.47,-.17)*f1_4+
        mat4(-.30,-.07,-.40,-.20,-.42,.42,1.09,.39,.25,.22,-.05,.23,.07,-.05,-.04,-.22)*f1_5+
        mat4(-.21,-.28,-.14,-.19,.47,.09,.17,.18,.18,.38,-.33,.62,-.52,.26,.01,.23)*f1_6+
        mat4(-.20,-.44,.35,-.04,-.06,-.26,-.22,.10,-.49,.19,.31,.15,.29,.47,.83,.34)*f1_7+
        vec4(1.27,-.42,.39,-.17))/1.4+f1_2;
    vec4 f2_3=sin(mat4(-.38,-.20,-.19,-.06,-.21,-.23,-.04,-.21,-.39,-.43,-.25,-.12,.15,-.12,.23,.00)*f1_0+
        mat4(-.47,-.26,.04,.03,.09,-.52,.13,-.02,-.19,-.06,-.11,-.05,.34,-.28,.16,-.47)*f1_1+
        mat4(-.05,-.22,.10,.22,.19,.44,.04,-.49,.06,.57,.29,.20,.35,-.02,.14,.34)*f1_2+
        mat4(.21,.36,.52,-.29,-.10,.15,.26,-.24,-.09,-.38,-.16,-.42,-.28,.39,-.12,.29)*f1_3+
        mat4(.17,-.11,-.24,.29,.18,.08,-.30,-.04,-.12,-.13,.32,-.05,-.13,.31,-.45,-.15)*f1_4+
        mat4(.26,.09,.02,-.16,-.25,-.33,-.21,.12,.33,-.02,.36,-.10,-.04,.29,-.45,-.18)*f1_5+
        mat4(.08,-.28,-.16,-.29,-.25,-.08,-.33,-.32,.00,.22,.29,-.16,-.01,.44,.04,.12)*f1_6+
        mat4(.01,-.09,-.46,-.36,.13,-.28,.33,-.49,-.11,-.24,.02,-.15,-.02,.12,-.35,-.28)*f1_7+
        vec4(2.16,-.29,1.67,.48))/1.4+f1_3;
    vec4 f2_4=sin(mat4(.32,.28,-.20,.12,-.07,.07,-.07,-.08,.18,-.16,.21,-.60,-.06,-.29,-.35,-.25)*f1_0+
        mat4(-.29,-.17,.38,-.29,.12,.42,-.20,.14,-.31,.01,-.04,-.34,-.43,.10,.31,.10)*f1_1+
        mat4(-.41,-.19,-.63,.02,-.32,.38,-.28,.14,-.30,.01,-.41,-.33,-.16,.10,-.09,-.51)*f1_2+
        mat4(.25,-.49,.22,.43,-.39,-.35,-.09,-.02,-.65,-.16,.42,-.15,-.18,.32,.28,-.35)*f1_3+
        mat4(-.36,.09,.08,-.17,.33,.13,-.02,.17,.08,-.46,.24,-.16,-.24,-.02,-.44,-.41)*f1_4+
        mat4(.12,.11,-.22,.13,-.12,.19,-.23,-.27,.25,-.05,-.33,.35,.19,.02,-.28,-.03)*f1_5+
        mat4(-.44,-.46,-.41,-.36,-.08,.09,.29,.19,-.14,.40,-.04,.54,.24,.08,-.01,.14)*f1_6+
        mat4(-.07,.34,-.39,-.28,-.35,-.19,.57,.38,.38,-.11,-.09,.18,.03,-.06,.20,.30)*f1_7+
        vec4(.62,.45,-1.16,-.93))/1.4+f1_4;
    vec4 f2_5=sin(mat4(.28,-.27,.09,.09,-.40,-.30,.18,.14,.29,.25,-.55,-.23,.25,-.28,-.20,.20)*f1_0+
        mat4(-.02,.44,.14,-.18,.20,.46,.66,-.24,-.02,.38,-.35,.04,-.13,-.16,-.03,-.21)*f1_1+
        mat4(-.15,-.38,.13,.50,-.01,-.35,-.12,.06,.31,-.09,-.06,-.23,-.27,-.33,-.06,-.10)*f1_2+
        mat4(.21,-.43,.42,-.31,-.05,-.03,-.07,-.24,.01,.45,.05,.10,-.18,-.30,-.24,-.32)*f1_3+
        mat4(-.22,.28,.09,-.01,-.40,-1.04,-.09,-.08,.34,.04,.48,.46,.13,.12,.07,.12)*f1_4+
        mat4(-.17,.52,.08,.22,-.25,.70,.49,-.50,-.31,-.12,.03,-.26,.57,.47,.04,.50)*f1_5+
        mat4(-.12,-.41,-.37,-.44,.53,.33,-.31,.19,.40,.23,.76,.27,-.04,-.27,-.40,.18)*f1_6+
        mat4(-.60,.21,-.55,.06,.19,.09,.13,-.18,-.25,-.47,.18,-.08,.00,-.18,-.54,-.12)*f1_7+
        vec4(-1.04,-1.02,.82,.79))/1.4+f1_5;
    vec4 f2_6=sin(mat4(.38,-.02,.62,-.06,.09,-.05,.63,.11,-1.14,-.10,-.06,.03,.02,-.11,-.11,-.07)*f1_0+
        mat4(.20,.70,-.07,.08,.12,.60,-.14,-.29,.39,.12,-.10,-.17,-.83,.32,-.32,-.30)*f1_1+
        mat4(.04,-.33,-.48,-.12,-.75,.25,.06,.24,.31,.28,-.46,-.19,.26,-.03,-.05,-.03)*f1_2+
        mat4(.14,.42,-.45,-.09,.67,-.37,-.22,-.23,.15,.13,.12,-.10,.46,-.20,-.34,.16)*f1_3+
        mat4(-.40,-.32,-.50,.19,-.60,-.01,.14,.24,-.03,.37,.10,-.07,-.63,.43,-.29,.18)*f1_4+
        mat4(-.10,.36,.43,-.16,.26,-.19,-.61,.22,-.31,-.43,.06,.24,-.21,-.12,.20,-.20)*f1_5+
        mat4(.49,-.35,-.06,-.26,.03,.25,.27,.29,-.52,-.11,.42,-.42,.53,-.32,-.76,.37)*f1_6+
        mat4(-.27,.01,.32,.05,-.15,.14,-.15,-.02,-.37,.03,.73,.38,-.56,-.02,-.36,.14)*f1_7+
        vec4(-3.13,.96,-2.02,-1.74))/1.4+f1_6;
    vec4 f2_7=sin(mat4(-.07,-.47,-.35,-.26,.17,.28,-.10,.35,-.10,-.46,.22,.34,-.28,-.14,.17,-.21)*f1_0+
        mat4(-.49,.47,.28,.13,.13,.03,-.10,-.46,.43,.20,-.16,.11,.03,.33,-.20,.57)*f1_1+
        mat4(-.38,.43,.42,.60,.26,.27,.41,-.21,.29,.28,.24,-.16,-.26,-.21,-.56,-.22)*f1_2+
        mat4(.24,-.03,.43,.15,-.06,-.45,.07,.17,.20,-.03,-.20,.05,-.04,-.01,.07,-.18)*f1_3+
        mat4(.09,.12,.01,-.36,-.56,-.05,-.15,.27,-.26,-.05,.26,-.33,-.37,.35,.18,-.31)*f1_4+
        mat4(.13,.27,-.20,-.32,.06,.30,-.16,.24,.07,-.12,-.38,-.46,.06,.16,-.07,.30)*f1_5+
        mat4(-.15,-.43,.24,-.06,.44,-.09,-.17,-.09,.12,-.19,.07,-.34,-.19,.11,.16,-.30)*f1_6+
        mat4(-.34,.34,-.39,.01,-.17,-.10,.38,.45,-.11,.28,.05,-.29,.27,.13,-.30,.30)*f1_7+
        vec4(-2.10,.10,.78,1.47))/1.4+f1_7;
    return dot(f2_0,vec4(.02,-.01,.03,-.01))+
        dot(f2_1,vec4(.01,.05,.02,.02))+
        dot(f2_2,vec4(.02,.01,-.02,.04))+
        dot(f2_3,vec4(.03,-.03,.05,.02))+
        dot(f2_4,vec4(.02,.03,.01,-.02))+
        dot(f2_5,vec4(-.03,-.01,.02,-.03))+
        dot(f2_6,vec4(-.01,.03,.02,-.05))+
        dot(f2_7,vec4(-.02,-.03,-.01,-.01))+
        -0.055;
    //// your implementation ends
}

// https://iquilezles.org/articles/mandelbulb/
// float mandelbulb(vec3 p)
// {
//     float power = 8.0 + sin(iTime) * 2.0;       // fractal power -- the higher, the more complex the fractal
//     int iterations = 20;
//     float bailout = 2.0;     // bailout radius -- the distance at which we consider the point to have escaped to infinity
//     float dr = 1.0;        // differential radius for normal estimation
//     float r = length(p);   // curr radius
    
//     vec3 z = p;
//     for (int i = 0; i < iterations; i++) {
//         r = length(z);
//         if (r > bailout) // r > bailout ? assume orbit escapes to infinity
//             break;
        
//         // Convert to spherical coordinates
//         float theta = acos(z.z / r); // polar angle from +ve z-axis
//         float phi = atan(z.y, z.x); // azimuth angle in xy plane, from +ve x-axis
        
//         // Scale and rotate the point
//         dr = pow(r, power - 1.0) * power * dr + 1.0;
//         float zr = pow(r, power);
//         theta *= power;
//         phi *= power;
        
//         // Convert back to Cartesian coordinates
//         z = zr * vec3(sin(theta) * cos(phi),
//                       sin(theta) * sin(phi),
//                       cos(theta));
//         z += p;
//     }
    
//     return 0.5 * log(r) * r / dr; // distance estimator -- estimate distance of p from the fractal
// }

vec2 mandelbulb(vec3 p)
{
    float power = 8.0 + sin(iTime) * 2.0;
    int iterations = 20;
    float bailout = 2.0;
    float dr = 1.0;
    float r = length(p);
    
    vec3 z = p;
    int i;
    for (i = 0; i < iterations; i++) {
        r = length(z);
        if (r > bailout)
            break;
        
        float theta = acos(z.z / r);
        float phi = atan(z.y, z.x);
        
        dr = pow(r, power - 1.0) * power * dr + 1.0;
        float zr = pow(r, power);
        theta *= power;
        phi *= power;
        
        z = zr * vec3(sin(theta) * cos(phi),
                      sin(theta) * sin(phi),
                      cos(theta));
        z += p;
    }
    
    return vec2(0.5 * log(r) * r / dr, float(i));
}

float sdfUnion(float d1, float d2)
{
    return min(d1, d2);
}

/////////////////////////////////////////////////////
//// Step 3: scene sdf
//// You are asked to use the sdf boolean operations to draw the bunny and the cow in the scene.
//// The bunny is located in the center of vec3(-1.0, 1., 4.), and the cow is located in the center of vec3(1.0, 1., 4.).
/////////////////////////////////////////////////////

//// sdf: p - query point
vec2 sdf(vec3 p)
{
    float s = 0.;

    float plane_h = -1.0;

    //// calculate the sdf based on all objects in the scene
    
    //// your implementation starts
    float plane = sdfPlane(p, plane_h);

    // float bunny = sdfBunny(p - vec3(-1.0, 1., 4.));
    // float cow = sdfCow(p - vec3(1.0, 1., 4.));
    float mandel = mandelbulb(rotate(p - vec3(0.0, 1.0, 5.0), vec3(0.0, 0.0, 1.0), 0.25 * iTime)).x;
    float mandel2 = mandelbulb(rotate(p - vec3(-2.0 * cos(iTime * 0.5), 1.0 + 2.0 * sin(iTime * 0.5), 5.0), vec3(0.0, 1./sqrt(2.), 1./sqrt(2.)), -0.25 * iTime)).x;
    float mandel3 = mandelbulb(rotate(p - vec3(2.0 * cos(iTime * 0.5), 1.0 - 2.0 * sin(iTime * 0.5), 5.0), vec3(0.0, 1./sqrt(2.), 1./sqrt(2.)), -0.25 * iTime)).x;
    float mandel4 = mandelbulb(rotate(p - vec3(-2.0 * cos(iTime * 0.5), 1.0 - 2.0 * sin(iTime * 0.5), 5.0), vec3(0.0, 1./sqrt(2.), 1./sqrt(2.)), 0.25 * iTime)).x;
    float mandel5 = mandelbulb(rotate(p - vec3(2.0 * cos(iTime * 0.5), 1.0 + 2.0 * sin(iTime * 0.5), 5.0), vec3(0.0, 1./sqrt(2.), 1./sqrt(2.)), 0.25 * iTime)).x;
    // float mandelbulb = mandelbulb((p - vec3(0.0, 1.0, 5.0))).x;

    // s = plane;
    s = mandel;
    float matID = 4.0;

    // if (bunny < s) {
    //     s = bunny;
    //     matID = 2.0;
    // } 
    // if (cow < s) {
    //     s = cow;
    //     matID = 3.0;
    // } 
    if (mandel2 < s) {
        s = mandel2;
    }
    if (mandel3 < s) {
        s = mandel3;
    }
    if (mandel4 < s) {
        s = mandel4;
    }
    if (mandel5 < s) {
        s = mandel5;
    }
    //// your implementation ends

    return vec2(s, matID);
}

// vec2 sdf2(vec3 p)
// {
//     float s = 0.;

//     float plane_h = -0.1;

//     float plane = sdfPlane(p, plane_h);

//     vec3 amongusPos = p - vec3(sin(iTime), 0.8, 4.0);
//     amongusPos = rotate(amongusPos, vec3(0, 1, 0), iTime);
//     float amongus = sdfAmogus(amongusPos);

//     vec3 amongusPos2 = p - vec3(-sin(iTime), 0.8, 4.0);
//     amongusPos2 = rotate(amongusPos2, vec3(0, 1, 0), iTime);
//     float amongus2 = sdfAmogus(amongusPos2);

//     float composite = sdfSmoothUnion(amongus, amongus2, 0.02);

//     s = composite;
//     float matID = 4.0;

//     if (plane < s) {
//         s = plane;
//         matID = 1.0;
//     }

//     return vec2(s, matID);
// }

/////////////////////////////////////////////////////
//// ray marching
/////////////////////////////////////////////////////

/////////////////////////////////////////////////////
//// Step 4: ray marching
//// You are asked to implement the ray marching algorithm within the following for-loop.
//// You are allowed to reuse your previous implementation in A1a for this function.
/////////////////////////////////////////////////////

//// ray marching: origin - ray origin; dir - ray direction 
vec2 rayMarching(vec3 origin, vec3 dir)
{
    vec2 s = vec2(0.0);
    float t = 0.0;

    //// your implementation starts
    for(int i = 0; i < 500; i++)
    {
        vec3 p = origin + dir * t;
        s = sdf(p);
        t += s.x;
        if(s.x < 0.001 || t > 100.0) break;

    }
    //// your implementation ends

    return vec2(t, s.y);
}

/////////////////////////////////////////////////////
//// normal calculation
/////////////////////////////////////////////////////

/////////////////////////////////////////////////////
//// Step 5: normal calculation
//// You are asked to calculate the sdf normal based on finite difference.
//// You are allowed to reuse your previous implementation in A1a for this function.
/////////////////////////////////////////////////////

//// normal: p - query point
vec3 normal(vec3 p)
{
    vec2 s = sdf(p);          //// sdf value in p
    float dx = 0.01;           //// step size for finite difference

    //// your implementation starts
    vec3 n = normalize(vec3(
        sdf(p + vec3(dx, 0.0, 0.0)).x - s.x,
        sdf(p + vec3(0.0, dx, 0.0)).x - s.x,
        sdf(p + vec3(0.0, 0.0, dx)).x - s.x
    ));
    //// your implementation ends

    return n;
}

/////////////////////////////////////////////////////
//// Phong shading
/////////////////////////////////////////////////////

/////////////////////////////////////////////////////
//// Step 6: lighting and coloring
//// You are asked to specify the color for the two neural SDF objects in the scene.
//// Each object must have a separate color without mixing.
//// Notice that we have implemented the default Phong shading model for you.
/////////////////////////////////////////////////////
vec3 phong_shading(vec3 p, vec3 n, float matID)
{
    //// background
    if(p.z > 20.0)
    {
        vec3 color = vec3(0.04, 0.16, 0.33);
        return color;
    }

    //// phong shading
    vec3 lightPos = vec3(4. * sin(iTime), 4., 4. * cos(iTime));
    vec3 l = normalize(lightPos - p);
    float amb = 0.1;
    float dif = max(dot(n, l), 0.) * 0.7;
    vec3 eye = CAM_POS;
    float spec = pow(max(dot(reflect(-l, n), normalize(eye - p)), 0.0), 128.0) * 0.9;

    vec3 sunDir = normalize(vec3(0, 1, -1)); //// parallel light direction
    float sunDif = max(dot(n, sunDir), 0.) * 0.2;

    //// shadow
    vec2 s = rayMarching(p + n * 0.02, l);
    if(s.x < length(lightPos - p))
        dif *= .2;

    vec3 color = vec3(1.0);

    //// your implementation starts
    if (matID == 1.0) {
        color = vec3(0.9, 0.9, 0.9);
    }
    else if (matID == 2.0) {
        color = vec3(1.0, 0.0, 0.0);
    }
    else if (matID == 3.0) {
        color = vec3(0.0, 1.0, 0.0);
    } else if (matID == 4.0) {
        vec3 animatedP = rotate(p, vec3(0.0, 1.0, 0.0), iTime);
        vec2 mandel = mandelbulb(animatedP - vec3(0.0, 1.0, 4.0));
        float distance = mandel.x;
        float iterations = mandel.y;

        // Normalize iterations to 0-1 range for palette lookup
        float normalized = iterations / 20.0;
        color = palette(normalized + iTime * 0.1);
        // color = vec3(1.0, 0.2, 0.2);
    }
    //// your implementation ends

    return (amb + dif + spec + sunDif) * color;
}

/////////////////////////////////////////////////////
//// main function
/////////////////////////////////////////////////////

void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    vec2 uv = (fragCoord.xy - .5 * iResolution.xy) / iResolution.y;         //// screen uv
    // vec3 origin = rotate(CAM_POS, vec3(0., 0., 1.), 0.5 * iTime);                                                  //// camera position 
    vec3 origin = CAM_POS;
    vec3 dir = normalize(vec3(uv.x, uv.y, 1));                              //// camera direction
    dir = rotate(dir, vec3(0., 0., 1.), 0.3 * iTime);
    vec2 s = rayMarching(origin, dir);                                     //// ray marching
    vec3 p = origin + dir * s.x;                                              //// ray-sdf intersection
    vec3 n = normal(p);                                                     //// sdf normal
    vec3 color = phong_shading(p, n, s.y);                                       //// phong shading
    fragColor = vec4(color, 1.);                                            //// fragment color
}

void main()
{
    mainImage(gl_FragColor, gl_FragCoord.xy);
}